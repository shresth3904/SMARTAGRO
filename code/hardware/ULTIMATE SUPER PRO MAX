#include <WiFi.h>
#include <HTTPClient.h>
#include <DHT.h>

// === Pins ===
#define TRIG_PIN 5
#define ECHO_PIN 18
#define SOIL_PIN_1 34
#define SOIL_PIN_2 35
#define DHTPIN 23
#define DHTTYPE DHT22
#define RELAY_PIN 13

int device_id = 1;

// === Tank Settings ===
const int tankHeight = 100; // cm

// === Soil Moisture Settings ===
const int dry_reading = 4095;
const int wet_reading = 1560;

// === WiFi & Server Settings ===
String wifiSSID     = "Piyush's OnePlus";
String wifiPassword = "PiyushLal";
String serverIP     = "10.171.97.231"; // example IP
String serverPort   = "5000";

String updateURL()  { return "http://" + serverIP + ":" + serverPort + "/update"; }
String commandURL() { return "http://" + serverIP + ":" + serverPort + "/pump"; }

// === DHT Sensor ===
DHT dht(DHTPIN, DHTTYPE);

void setup() {
  Serial.begin(115200);

  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, HIGH); // relay off

  analogReadResolution(12);
  analogSetPinAttenuation(SOIL_PIN_1, ADC_11db);
  analogSetPinAttenuation(SOIL_PIN_2, ADC_11db);

  dht.begin();

  if (wifiSSID != "" && wifiPassword != "") {
    WiFi.begin(wifiSSID.c_str(), wifiPassword.c_str());
    Serial.print("Connecting to WiFi ..");
    unsigned long start = millis();
    while (WiFi.status() != WL_CONNECTED && millis() - start < 10000) {
      delay(1000);
      Serial.print(".");
    }
    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("Connected!");
      Serial.print("ESP32 IP: ");
      Serial.println(WiFi.localIP());
    } else {
      Serial.println("WiFi not connected (skipping server)");
    }
  } else {
    Serial.println("WiFi credentials not set. Running offline mode.");
  }
}

// ===== Sensor Functions =====
int readWaterLevelSingle() {
  digitalWrite(TRIG_PIN, LOW); delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH); delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  long duration = pulseIn(ECHO_PIN, HIGH, 30000);
  if (duration == 0) return -1;

  float distance = (duration * 0.0343) / 2;
  distance = constrain(distance, 0, tankHeight);
  float filledHeight = tankHeight - distance;
  int waterLevelPercent = round((filledHeight / tankHeight) * 100);
  return constrain(waterLevelPercent, 0, 100);
}

int readSoilMoisture(int pin) {
  int moisture = analogRead(pin);
  int moisturePercent = map(moisture, wet_reading, dry_reading, 100, 0);
  return constrain(moisturePercent, 0, 100);
}

bool readDHT(float &humidity, float &temperature) {
  humidity = dht.readHumidity();
  temperature = dht.readTemperature();
  if (isnan(humidity) || isnan(temperature)) return false;
  return true;
}

// ===== Communication Functions =====
void sendData(int waterLevel, int soilMoisture, float humidity, float temperature) {
  if (WiFi.status() != WL_CONNECTED || serverIP == "") return;

  HTTPClient http;
  http.begin(updateURL());
  http.addHeader("Content-Type", "application/json");

  String body = "{";
  body += "\"water_level\":" + String(waterLevel) + ",";
  body += "\"soil_moisture\":" + String(soilMoisture) + ",";
  body += "\"humidity\":" + String(humidity) + ",";
  body += "\"temperature\":" + String(temperature) + ",";
  body += "\"device_id\":" + String(device_id);
  body += "}";

  Serial.println("Sending JSON: " + body);

  int code = http.POST(body);
  Serial.print("POST code: "); Serial.println(code);

  String resp = http.getString();
  Serial.println("Response: " + resp);

  http.end();
}

void checkPumpCommand() {
  if (WiFi.status() != WL_CONNECTED || serverIP == "") return;

  HTTPClient http;
  http.begin(commandURL() + "?device_id=" + String(device_id));
  int httpResponseCode = http.GET();

  if (httpResponseCode == 200) {
    String payload = http.getString();
    payload.trim();
    Serial.print("Command: ");
    Serial.println(payload);

    if (payload == "1") {
      digitalWrite(RELAY_PIN, LOW);  // ON
      Serial.println("Pump: ON");
    } else if (payload == "0") {
      digitalWrite(RELAY_PIN, HIGH); // OFF
      Serial.println("Pump: OFF");
    }
  } else {
    Serial.print("Command fetch error: ");
    Serial.println(httpResponseCode);
  }

  http.end();
}

void loop() {
  int waterLevel = readWaterLevelSingle();
  int soil1 = readSoilMoisture(SOIL_PIN_1);
  int soil2 = readSoilMoisture(SOIL_PIN_2);
  int avgSoil = (soil1 + soil2) / 2;

  float humidity = 0, temperature = 0;
  readDHT(humidity, temperature);

  Serial.println("=== Sensor Readings ===");
  Serial.printf("Water: %d%% | Soil1: %d%% | Soil2: %d%% | Avg Soil: %d%% | Hum: %.1f%% | Temp: %.1fÂ°C\n",
                waterLevel, soil1, soil2, avgSoil, humidity, temperature);

  sendData(waterLevel, avgSoil, humidity, temperature);
  checkPumpCommand();

  delay(200);
}
